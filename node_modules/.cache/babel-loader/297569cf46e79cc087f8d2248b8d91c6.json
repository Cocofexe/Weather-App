{"ast":null,"code":"var _jsxFileName = \"/home/federico-giovenco/Henry.Carreer/FT-M2/08-React-Estado-LifeCycle/homework/src/App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport Nav from './components/Nav';\nimport Cards from './components/Cards';\n\nfunction App() {\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id !== id));\n  }\n\n  const [cities, setCities] = useState([]);\n\n  function onSearch(ciudad) {\n    const apiKey = '4ae2636d8dfbdc3044bede63951a019b';\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`).then(r => r.json()).then(recurso => {\n      if (recurso.main !== undefined) {\n        const ciudad = {\n          min: Math.round(recurso.main.temp_min),\n          max: Math.round(recurso.main.temp_max),\n          img: recurso.weather[0].icon,\n          id: recurso.id,\n          wind: recurso.wind.speed,\n          temp: recurso.main.temp,\n          name: recurso.name,\n          weather: recurso.weather[0].main,\n          clouds: recurso.clouds.all,\n          latitud: recurso.coord.lat,\n          longitud: recurso.coord.lon\n        };\n        setCities(oldCities => [...oldCities, ciudad]);\n      } else {\n        alert(\"Ciudad no encontrada\");\n      }\n    });\n  }\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(Nav, {\n    onSearch: onSearch,\n    cities: cities,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), React.createElement(Cards, {\n    cities: cities,\n    onClose: onClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/federico-giovenco/Henry.Carreer/FT-M2/08-React-Estado-LifeCycle/homework/src/App.js"],"names":["React","useState","Nav","Cards","App","onClose","id","setCities","oldCities","filter","c","cities","onSearch","ciudad","apiKey","fetch","then","r","json","recurso","main","undefined","min","Math","round","temp_min","max","temp_max","img","weather","icon","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","alert"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,WAAP;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,SAASC,GAAT,GAAe;AACb,WAASC,OAAT,CAAiBC,EAAjB,EAAqB;AACnBC,IAAAA,SAAS,CAACC,SAAS,IAAIA,SAAS,CAACC,MAAV,CAAiBC,CAAC,IAAIA,CAAC,CAACJ,EAAF,KAASA,EAA/B,CAAd,CAAT;AACD;;AAED,QAAM,CAACK,MAAD,EAASJ,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;;AAEA,WAASW,QAAT,CAAkBC,MAAlB,EAA0B;AACxB,UAAMC,MAAM,GAAG,kCAAf;AACAC,IAAAA,KAAK,CAAE,oDAAmDF,MAAO,UAASC,MAAO,eAA5E,CAAL,CACGE,IADH,CACQC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADb,EAEGF,IAFH,CAESG,OAAD,IAAa;AACjB,UAAGA,OAAO,CAACC,IAAR,KAAiBC,SAApB,EAA8B;AAC5B,cAAMR,MAAM,GAAG;AACbS,UAAAA,GAAG,EAAEC,IAAI,CAACC,KAAL,CAAWL,OAAO,CAACC,IAAR,CAAaK,QAAxB,CADQ;AAEbC,UAAAA,GAAG,EAAEH,IAAI,CAACC,KAAL,CAAWL,OAAO,CAACC,IAAR,CAAaO,QAAxB,CAFQ;AAGbC,UAAAA,GAAG,EAAET,OAAO,CAACU,OAAR,CAAgB,CAAhB,EAAmBC,IAHX;AAIbxB,UAAAA,EAAE,EAAEa,OAAO,CAACb,EAJC;AAKbyB,UAAAA,IAAI,EAAEZ,OAAO,CAACY,IAAR,CAAaC,KALN;AAMbC,UAAAA,IAAI,EAAEd,OAAO,CAACC,IAAR,CAAaa,IANN;AAObC,UAAAA,IAAI,EAAEf,OAAO,CAACe,IAPD;AAQbL,UAAAA,OAAO,EAAEV,OAAO,CAACU,OAAR,CAAgB,CAAhB,EAAmBT,IARf;AASbe,UAAAA,MAAM,EAAEhB,OAAO,CAACgB,MAAR,CAAeC,GATV;AAUbC,UAAAA,OAAO,EAAElB,OAAO,CAACmB,KAAR,CAAcC,GAVV;AAWbC,UAAAA,QAAQ,EAAErB,OAAO,CAACmB,KAAR,CAAcG;AAXX,SAAf;AAaAlC,QAAAA,SAAS,CAACC,SAAS,IAAI,CAAC,GAAGA,SAAJ,EAAeK,MAAf,CAAd,CAAT;AACD,OAfD,MAeO;AACL6B,QAAAA,KAAK,CAAC,sBAAD,CAAL;AACD;AACF,KArBH;AAuBC;;AACD,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAE,GAAF;AAAM,IAAA,QAAQ,EAAE9B,QAAhB;AAA0B,IAAA,MAAM,EAAID,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAEA,MAAf;AAAuB,IAAA,OAAO,EAAGN,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMH;;AACD,eAAeD,GAAf","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport Nav from './components/Nav'\nimport Cards from './components/Cards'\n\nfunction App() {\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id !== id));\n  }\n\n  const [cities, setCities] = useState([]);\n\n  function onSearch(ciudad) {\n    const apiKey = '4ae2636d8dfbdc3044bede63951a019b'\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`)\n      .then(r => r.json())\n      .then((recurso) => {\n        if(recurso.main !== undefined){\n          const ciudad = {\n            min: Math.round(recurso.main.temp_min),\n            max: Math.round(recurso.main.temp_max),\n            img: recurso.weather[0].icon,\n            id: recurso.id,\n            wind: recurso.wind.speed,\n            temp: recurso.main.temp,\n            name: recurso.name,\n            weather: recurso.weather[0].main,\n            clouds: recurso.clouds.all,\n            latitud: recurso.coord.lat,\n            longitud: recurso.coord.lon\n          };\n          setCities(oldCities => [...oldCities, ciudad]);\n        } else {\n          alert(\"Ciudad no encontrada\");\n        }\n      });\n      \n    }\n    return (\n      <div className=\"App\">\n        < Nav onSearch={onSearch} cities = {cities}/>\n        <Cards cities={cities} onClose= {onClose}/>\n      </div>\n    );\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}